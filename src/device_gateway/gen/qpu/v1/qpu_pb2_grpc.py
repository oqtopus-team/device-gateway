# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""

import grpc

from device_gateway.gen.qpu.v1 import qpu_pb2 as qpu_dot_v1_dot_qpu__pb2


class QpuServiceStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.GetDeviceInfo = channel.unary_unary(
            "/qpu_interface.v1.QpuService/GetDeviceInfo",
            request_serializer=qpu_dot_v1_dot_qpu__pb2.GetDeviceInfoRequest.SerializeToString,
            response_deserializer=qpu_dot_v1_dot_qpu__pb2.GetDeviceInfoResponse.FromString,
            _registered_method=True,
        )
        self.GetServiceStatus = channel.unary_unary(
            "/qpu_interface.v1.QpuService/GetServiceStatus",
            request_serializer=qpu_dot_v1_dot_qpu__pb2.GetServiceStatusRequest.SerializeToString,
            response_deserializer=qpu_dot_v1_dot_qpu__pb2.GetServiceStatusResponse.FromString,
            _registered_method=True,
        )
        self.CallJob = channel.unary_unary(
            "/qpu_interface.v1.QpuService/CallJob",
            request_serializer=qpu_dot_v1_dot_qpu__pb2.CallJobRequest.SerializeToString,
            response_deserializer=qpu_dot_v1_dot_qpu__pb2.CallJobResponse.FromString,
            _registered_method=True,
        )


class QpuServiceServicer(object):
    """Missing associated documentation comment in .proto file."""

    def GetDeviceInfo(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details("Method not implemented!")
        raise NotImplementedError("Method not implemented!")

    def GetServiceStatus(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details("Method not implemented!")
        raise NotImplementedError("Method not implemented!")

    def CallJob(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details("Method not implemented!")
        raise NotImplementedError("Method not implemented!")


def add_QpuServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
        "GetDeviceInfo": grpc.unary_unary_rpc_method_handler(
            servicer.GetDeviceInfo,
            request_deserializer=qpu_dot_v1_dot_qpu__pb2.GetDeviceInfoRequest.FromString,
            response_serializer=qpu_dot_v1_dot_qpu__pb2.GetDeviceInfoResponse.SerializeToString,
        ),
        "GetServiceStatus": grpc.unary_unary_rpc_method_handler(
            servicer.GetServiceStatus,
            request_deserializer=qpu_dot_v1_dot_qpu__pb2.GetServiceStatusRequest.FromString,
            response_serializer=qpu_dot_v1_dot_qpu__pb2.GetServiceStatusResponse.SerializeToString,
        ),
        "CallJob": grpc.unary_unary_rpc_method_handler(
            servicer.CallJob,
            request_deserializer=qpu_dot_v1_dot_qpu__pb2.CallJobRequest.FromString,
            response_serializer=qpu_dot_v1_dot_qpu__pb2.CallJobResponse.SerializeToString,
        ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
        "qpu_interface.v1.QpuService", rpc_method_handlers
    )
    server.add_generic_rpc_handlers((generic_handler,))
    server.add_registered_method_handlers(
        "qpu_interface.v1.QpuService", rpc_method_handlers
    )


# This class is part of an EXPERIMENTAL API.
class QpuService(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def GetDeviceInfo(
        request,
        target,
        options=(),
        channel_credentials=None,
        call_credentials=None,
        insecure=False,
        compression=None,
        wait_for_ready=None,
        timeout=None,
        metadata=None,
    ):
        return grpc.experimental.unary_unary(
            request,
            target,
            "/qpu_interface.v1.QpuService/GetDeviceInfo",
            qpu_dot_v1_dot_qpu__pb2.GetDeviceInfoRequest.SerializeToString,
            qpu_dot_v1_dot_qpu__pb2.GetDeviceInfoResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True,
        )

    @staticmethod
    def GetServiceStatus(
        request,
        target,
        options=(),
        channel_credentials=None,
        call_credentials=None,
        insecure=False,
        compression=None,
        wait_for_ready=None,
        timeout=None,
        metadata=None,
    ):
        return grpc.experimental.unary_unary(
            request,
            target,
            "/qpu_interface.v1.QpuService/GetServiceStatus",
            qpu_dot_v1_dot_qpu__pb2.GetServiceStatusRequest.SerializeToString,
            qpu_dot_v1_dot_qpu__pb2.GetServiceStatusResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True,
        )

    @staticmethod
    def CallJob(
        request,
        target,
        options=(),
        channel_credentials=None,
        call_credentials=None,
        insecure=False,
        compression=None,
        wait_for_ready=None,
        timeout=None,
        metadata=None,
    ):
        return grpc.experimental.unary_unary(
            request,
            target,
            "/qpu_interface.v1.QpuService/CallJob",
            qpu_dot_v1_dot_qpu__pb2.CallJobRequest.SerializeToString,
            qpu_dot_v1_dot_qpu__pb2.CallJobResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True,
        )
